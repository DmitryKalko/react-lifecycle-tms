// ЖИЗНЕННЫЙ ЦИКЛ
// Mounting - Updation - Unmouting


// MOUNTING - монтирование

// Фаза, на которой React компонент монтируется в DOM
// (т.е. создается и вставляется в DOM)
// Тут наш компонент рендерится в первый раз

//Фазы монтирования:
// -  static getDerivedStateFromProps()
// - render()
// - componentDidMount()

// Методы доступные на этом этапе:

// 1) static getDerivedStateFromProps (props, state)
// запускается при каждой перерисовке до render
// смотрит изменились ли props и можно присвоить их в state

// 2) componentDidMount()
// Вызывается только один раз во всем жизненном цикле данного компонента ПОСЛЕ render.
// Указывает на то, что компонент и все его дочерние компоненты отрисовались без ошибок.
// Т.к. эта функция гарантирована будет вызвана лишь раз, то это отличное место для выполнения любых сайд-эффектов (AJAX запросы)


// UPDATE - обновление
// На этом этапе данные компонента (state и props) обновляются в ответ на пользовательские события.
// Это приводит к повторному рендеренгу.

// Фазы обновления:
// - static getDerivedStateFromProps()  так как запускается при каждой перерисовке
// - shouldComponentUpate()
// - render()
// - getSnapshotBeforeUpdate()
// - componentDidUpdate

// Методы доступные на этом этапе:

// 1) static getDerivedStateFromProps()
// был описан выше

// 2) shouldComponentUpate(nextProps, nextState)
// вызывается перед рендером, когда получает новые пропсы или состояние.
// Значение по умолчанию равно true.
// Не вызывается при первом рендере
// Нужен чтобы указать необходимость следующего рендера на основе изменений состояния и пропсов

// 3) getSnapshotBeforeUpdate()
// Вызывается перед настоящим обновлением DOM.
// Некоторую полезную информацию можно получить (например положение прокрутки) и передать в componentDidUpdate(prevProps,prevSteate) третьим параметром

// 4) componentDidUpdate(prevProps, prevState, snapshot)
// Этот метод будет вызываться сразу после завершения обновления.
// Этот метод не будет выполняться при первом рендеринге.
// Когда компонент обновлен, вы можете управлять DOM здесь.
// можно использовать для сетевых запросовтолько с проверкой на наличие новых пропсов

// UNMOUNTING - размонтирование

// Методы доступные на этом этапе:

// componentWillUnmount()
// Будет вызываться непосредственно перед уничтожением компонента.
// Этот метод в основном используется для выполнения некоторых задач очистки (таймеры, привязок событий, отмена сетевых запросов)

///////////////////////////////////

// Предохранители — это React-компоненты, которые перехватывают JavaScript-ошибки в любом месте их дочернего дерева компонентов.
// Затем логируют эти ошибки и отображают запасной интерфейс вместо «поломанного» дерева компонентов.
// Предохранители отлавливают ошибки при рендере, в методах жизненного цикла и в конструкторах всего дерева под ними.

// Классовый компонент становится предохранителем, если в нём используются методы жизненного цикла:
// static getDerivedStateFromError() - вызывается во время рендера и (или) componentDidCatch() - вызывается во время этапа фиксации.
